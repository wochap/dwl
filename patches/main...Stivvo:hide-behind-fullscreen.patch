From d249eba6d995768e51cec329158b5219a4b785f8 Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Thu, 24 Dec 2020 21:29:47 +0100
Subject: [PATCH 01/15] No render windows and bottom layer behind fscreen

Hiding other windows behind a fullscreen window allows to fully see the
wallpaper behind a fullscreen transparent terminal and can save a little
bit of power.

Not rendering bottom layer shell prevents waybar from being shown behind
a fullscreen transparent terminal.
---
 dwl.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/dwl.c b/dwl.c
index 0af88ab51..86544722f 100644
--- a/dwl.c
+++ b/dwl.c
@@ -1599,7 +1599,10 @@ renderclients(Monitor *m, struct timespec *now)
 	wl_list_for_each_reverse(c, &stack, slink) {
 		/* Only render visible clients which show on this monitor */
 		if (!VISIBLEON(c, c->mon) || !wlr_output_layout_intersects(
-					output_layout, m->wlr_output, &c->geom))
+					output_layout, m->wlr_output, &c->geom) ||
+				(m->fullscreenclient && m->fullscreenclient != c))
+				/* Alternative: render at least all fullscreen windows*/
+				/* (m->fullscreenclient && !c->isfullscreen)) */
 			continue;
 
 		surface = WLR_SURFACE(c);
@@ -1688,7 +1691,8 @@ rendermon(struct wl_listener *listener, void *data)
 		wlr_renderer_clear(drw, rootcolor);
 
 		renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BACKGROUND], &now);
-		renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BOTTOM], &now);
+		if (!m->fullscreenclient)
+			renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BOTTOM], &now);
 		renderclients(m, &now);
 #ifdef XWAYLAND
 		renderindependents(m->wlr_output, &now);

From f8b35b94eee7b74aab4b2db7183a5322092571f7 Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Fri, 25 Dec 2020 15:32:36 +0100
Subject: [PATCH 02/15] From Monitor->fullscreenclient to Monitor->focus

Keep in memory which client is currently focused on every monitor. This
partially eliminates the need for selclient(), is simpler and more
versatile (especially considering the hide-behind-fullscreen patch)
---
 dwl.c | 26 +++++++++++++-------------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/dwl.c b/dwl.c
index 20d1c981e..24a1d8302 100644
--- a/dwl.c
+++ b/dwl.c
@@ -152,7 +152,7 @@ struct Monitor {
 	unsigned int tagset[2];
 	double mfact;
 	int nmaster;
-	Client *fullscreenclient;
+	Client *focus;
 };
 
 typedef struct {
@@ -381,8 +381,8 @@ arrange(Monitor *m)
 	m->w = m->m;
 	if (m->lt[m->sellt]->arrange)
 		m->lt[m->sellt]->arrange(m);
-	else if (m->fullscreenclient)
-		maximizeclient(m->fullscreenclient);
+	else if (m->focus && m->focus->isfullscreen)
+		maximizeclient(m->focus);
 	/* XXX recheck pointer focus here... or in resize()? */
 }
 
@@ -713,13 +713,11 @@ setfullscreen(Client *c, int fullscreen)
 		c->prevy = c->geom.y;
 		c->prevheight = c->geom.height;
 		c->prevwidth = c->geom.width;
-		c->mon->fullscreenclient = c;
 		maximizeclient(c);
 	} else {
 		/* restore previous size instead of arrange for floating windows since
 		 * client positions are set by the user and cannot be recalculated */
 		resize(c, c->prevx, c->prevy, c->prevwidth, c->prevheight, 0);
-		c->mon->fullscreenclient = NULL;
 		arrange(c->mon);
 	}
 }
@@ -787,6 +785,7 @@ focusclient(Client *old, Client *c, int lift)
 	wl_list_remove(&c->flink);
 	wl_list_insert(&fstack, &c->flink);
 	selmon = c->mon;
+	c->mon->focus = c;
 
 	/* Activate the new client */
 #ifdef XWAYLAND
@@ -803,6 +802,7 @@ focusmon(const Arg *arg)
 	Client *sel = selclient();
 
 	selmon = dirtomon(arg->i);
+	selmon->focus = sel;
 	focusclient(sel, focustop(selmon), 1);
 }
 
@@ -972,7 +972,7 @@ void
 maprequest(struct wl_listener *listener, void *data)
 {
 	/* Called when the surface is mapped, or ready to display on-screen. */
-	Client *c = wl_container_of(listener, c, map), *oldfocus = selclient();
+	Client *c = wl_container_of(listener, c, map), *oldfocus = selmon->focus;
 
 #ifdef XWAYLAND
 	if (c->type == X11Unmanaged) {
@@ -1004,12 +1004,12 @@ maprequest(struct wl_listener *listener, void *data)
 	/* Set initial monitor, tags, floating status, and focus */
 	applyrules(c);
 
-	if (c->mon->fullscreenclient && c->mon->fullscreenclient == oldfocus
+	if (oldfocus && oldfocus->isfullscreen && oldfocus->mon == c->mon
 			&& !c->isfloating && c->mon->lt[c->mon->sellt]->arrange) {
-		maximizeclient(c->mon->fullscreenclient);
-		focusclient(c, c->mon->fullscreenclient, 1);
-		/* give the focus back the fullscreen client on that monitor if exists,
-		 * is focused and the new client isn't floating */
+		maximizeclient(oldfocus);
+		focusclient(c, oldfocus, 1);
+		/* give the focus back the fullscreen client on the new client's monitor
+		 * if exists, was focused and the new client isn't floating */
 	}
 }
 
@@ -1241,7 +1241,7 @@ render(struct wlr_surface *surface, int sx, int sy, void *data)
 void
 renderclients(Monitor *m, struct timespec *now)
 {
-	Client *c, *sel = selclient();
+	Client *c;
 	const float *color;
 	double ox, oy;
 	int i, w, h;
@@ -1272,7 +1272,7 @@ renderclients(Monitor *m, struct timespec *now)
 			};
 
 			/* Draw window borders */
-			color = (c == sel) ? focuscolor : bordercolor;
+			color = (c == m->focus) ? focuscolor : bordercolor;
 			for (i = 0; i < 4; i++) {
 				scalebox(&borders[i], m->wlr_output->scale);
 				wlr_render_rect(drw, &borders[i], color,

From 3e32d34f5df9d632c0ecb8f33654868e8d66b00a Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Fri, 25 Dec 2020 15:52:52 +0100
Subject: [PATCH 03/15] Render the focused fscrn client or everything else

Adapt to Monitor.focused

This follows the philosophy of the recent changes in the fullscreen
branch. Render only the fullscreen window when is focused, otherwise
keep rendering everything as usual. This allows more flexibility because
other clients can still be used even if one client is fullscreen, or
even multiple fullscreen client can exist in the same tag.
---
 dwl.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/dwl.c b/dwl.c
index 55dde1f21..590e4cdf6 100644
--- a/dwl.c
+++ b/dwl.c
@@ -1600,9 +1600,9 @@ renderclients(Monitor *m, struct timespec *now)
 		/* Only render visible clients which show on this monitor */
 		if (!VISIBLEON(c, c->mon) || !wlr_output_layout_intersects(
 					output_layout, m->wlr_output, &c->geom) ||
-				(m->fullscreenclient && m->fullscreenclient != c))
-				/* Alternative: render at least all fullscreen windows*/
-				/* (m->fullscreenclient && !c->isfullscreen)) */
+				(m->focus->isfullscreen && c != m->focus))
+				/* render only the focused fullscreen client if there is one in
+				 * that monitor */
 			continue;
 
 		surface = WLR_SURFACE(c);
@@ -1691,7 +1691,7 @@ rendermon(struct wl_listener *listener, void *data)
 		wlr_renderer_clear(drw, rootcolor);
 
 		renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BACKGROUND], &now);
-		if (!m->fullscreenclient)
+		if (!m->focus || !m->focus->isfullscreen)
 			renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BOTTOM], &now);
 		renderclients(m, &now);
 #ifdef XWAYLAND

From da5ca5c77f87e1022fd67024105386a64acb237a Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Fri, 25 Dec 2020 16:35:12 +0100
Subject: [PATCH 04/15] Only focus fullscreen back on the same tag and mon

The new client must be on the same tag and monitor as before to focus
the fullscreen client back.
---
 dwl.c | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/dwl.c b/dwl.c
index 24a1d8302..1042fb133 100644
--- a/dwl.c
+++ b/dwl.c
@@ -1004,12 +1004,14 @@ maprequest(struct wl_listener *listener, void *data)
 	/* Set initial monitor, tags, floating status, and focus */
 	applyrules(c);
 
-	if (oldfocus && oldfocus->isfullscreen && oldfocus->mon == c->mon
-			&& !c->isfloating && c->mon->lt[c->mon->sellt]->arrange) {
+	if (oldfocus && oldfocus->isfullscreen &&
+			oldfocus->mon == c->mon && oldfocus->tags == c->tags &&
+			!c->isfloating && c->mon->lt[c->mon->sellt]->arrange) {
 		maximizeclient(oldfocus);
 		focusclient(c, oldfocus, 1);
-		/* give the focus back the fullscreen client on the new client's monitor
-		 * if exists, was focused and the new client isn't floating */
+		/* If a fullscreen client on the same monitor and tag as the new client
+		 * was previously focused and the new client isn't floating, give it
+		 * back focus and size */
 	}
 }
 

From 713a036db6fd365d2ea47b25d8a9aa57e0b15116 Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Sat, 26 Dec 2020 14:02:10 +0100
Subject: [PATCH 05/15] Fix > 1 clients borders being highlighted

With multiple clients on multiple monitors, one client for each monitor
had "focuscolor" colored borders. Now, only just the currently focused
client has "focuscolor" colored borders as usual.
---
 dwl.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dwl.c b/dwl.c
index 1042fb133..0de691562 100644
--- a/dwl.c
+++ b/dwl.c
@@ -1274,7 +1274,7 @@ renderclients(Monitor *m, struct timespec *now)
 			};
 
 			/* Draw window borders */
-			color = (c == m->focus) ? focuscolor : bordercolor;
+			color = (c == selmon->focus) ? focuscolor : bordercolor;
 			for (i = 0; i < 4; i++) {
 				scalebox(&borders[i], m->wlr_output->scale);
 				wlr_render_rect(drw, &borders[i], color,

From 689099811090ef0aaf3c9460a291fc842684df41 Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Sat, 26 Dec 2020 14:44:43 +0100
Subject: [PATCH 06/15] Skip i++ if c->isfullscreen

continue; to avoid i++

It doesn't affect the behavior of dwl but makes sense
---
 dwl.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/dwl.c b/dwl.c
index 0de691562..f85cd9187 100644
--- a/dwl.c
+++ b/dwl.c
@@ -1733,9 +1733,11 @@ tile(Monitor *m)
 	wl_list_for_each(c, &clients, link) {
 		if (!VISIBLEON(c, m) || c->isfloating)
 			continue;
-		if (c->isfullscreen)
+		if (c->isfullscreen) {
 			maximizeclient(c);
-		else if (i < m->nmaster) {
+			continue;
+		}
+		if (i < m->nmaster) {
 			h = (m->w.height - my) / (MIN(n, m->nmaster) - i);
 			resize(c, m->w.x, m->w.y + my, mw, h, 0);
 			my += c->geom.height;

From e238e7f4184d87d2e109cab8bcc132def3294a6f Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Wed, 10 Feb 2021 16:56:08 +0100
Subject: [PATCH 07/15] Fix focusclient

---
 dwl.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dwl.c b/dwl.c
index cd13f267f..06315c0be 100644
--- a/dwl.c
+++ b/dwl.c
@@ -1357,7 +1357,7 @@ mapnotify(struct wl_listener *listener, void *data)
 			oldfocus->mon == c->mon && oldfocus->tags == c->tags &&
 			!c->isfloating && c->mon->lt[c->mon->sellt]->arrange) {
 		maximizeclient(oldfocus);
-		focusclient(c, oldfocus, 1);
+		focusclient(c, 1);
 		/* If a fullscreen client on the same monitor and tag as the new client
 		 * was previously focused and the new client isn't floating, give it
 		 * back focus and size */

From 09da42e66856d64e7aca11db19da44dc4d7eb7ec Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Wed, 10 Feb 2021 23:34:44 +0100
Subject: [PATCH 08/15] Remove client.focus

Don't disable fullscreen on all the clients when spawning a new one

Don't focus back the fullscreen client when another client is created on
top of it

All this aims at simplicity and performance by reducing the control of
dwl on how fullscreen works
---
 dwl.c | 18 ++----------------
 1 file changed, 2 insertions(+), 16 deletions(-)

diff --git a/dwl.c b/dwl.c
index 06315c0be..1f9580b77 100644
--- a/dwl.c
+++ b/dwl.c
@@ -175,7 +175,6 @@ struct Monitor {
 	unsigned int tagset[2];
 	double mfact;
 	int nmaster;
-	Client *focus;
 };
 
 typedef struct {
@@ -884,9 +883,6 @@ createnotify(struct wl_listener *listener, void *data)
 
 	if (xdg_surface->role != WLR_XDG_SURFACE_ROLE_TOPLEVEL)
 		return;
-	wl_list_for_each(c, &clients, link)
-		if (c->isfullscreen && VISIBLEON(c, c->mon))
-			setfullscreen(c, 0);
 
 	/* Allocate a Client for this surface */
 	c = xdg_surface->data = calloc(1, sizeof(*c));
@@ -1333,7 +1329,7 @@ void
 mapnotify(struct wl_listener *listener, void *data)
 {
 	/* Called when the surface is mapped, or ready to display on-screen. */
-	Client *c = wl_container_of(listener, c, map), *oldfocus = selmon->focus;
+	Client *c = wl_container_of(listener, c, map);
 
 	if (client_is_unmanaged(c)) {
 		/* Insert this independent into independents lists. */
@@ -1352,16 +1348,6 @@ mapnotify(struct wl_listener *listener, void *data)
 
 	/* Set initial monitor, tags, floating status, and focus */
 	applyrules(c);
-
-	if (oldfocus && oldfocus->isfullscreen &&
-			oldfocus->mon == c->mon && oldfocus->tags == c->tags &&
-			!c->isfloating && c->mon->lt[c->mon->sellt]->arrange) {
-		maximizeclient(oldfocus);
-		focusclient(c, 1);
-		/* If a fullscreen client on the same monitor and tag as the new client
-		 * was previously focused and the new client isn't floating, give it
-		 * back focus and size */
-	}
 }
 
 void
@@ -1700,7 +1686,7 @@ renderclients(Monitor *m, struct timespec *now)
 			};
 
 			/* Draw window borders */
-			color = (c == selmon->focus) ? focuscolor : bordercolor;
+			color = (c->surface.xdg->toplevel->current.activated) ? focuscolor : bordercolor;
 			for (i = 0; i < 4; i++) {
 				scalebox(&borders[i], m->wlr_output->scale);
 				wlr_render_rect(drw, &borders[i], color,

From 13b853d96a1a50c54569ae638424fc3dc20f2c12 Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Wed, 10 Feb 2021 23:41:37 +0100
Subject: [PATCH 09/15] Remove maximize function

Resizing fullscreen windows in tile and monocle is useless
---
 dwl.c | 25 ++++---------------------
 1 file changed, 4 insertions(+), 21 deletions(-)

diff --git a/dwl.c b/dwl.c
index 1f9580b77..85c4e1ad5 100644
--- a/dwl.c
+++ b/dwl.c
@@ -248,7 +248,6 @@ static void keypressmod(struct wl_listener *listener, void *data);
 static void killclient(const Arg *arg);
 static void maplayersurfacenotify(struct wl_listener *listener, void *data);
 static void mapnotify(struct wl_listener *listener, void *data);
-static void maximizeclient(Client *c);
 static void monocle(Monitor *m);
 static void motionabsolute(struct wl_listener *listener, void *data);
 static void motionnotify(uint32_t time);
@@ -483,8 +482,6 @@ arrange(Monitor *m)
 {
 	if (m->lt[m->sellt]->arrange)
 		m->lt[m->sellt]->arrange(m);
-	else if (m->focus && m->focus->isfullscreen)
-		maximizeclient(m->focus);
 	/* TODO recheck pointer focus here... or in resize()? */
 }
 
@@ -1040,13 +1037,6 @@ togglefullscreen(const Arg *arg)
 	setfullscreen(sel, !sel->isfullscreen);
 }
 
-void
-maximizeclient(Client *c)
-{
-	resize(c, c->mon->m.x, c->mon->m.y, c->mon->m.width, c->mon->m.height, 0);
-	/* used for fullscreen clients */
-}
-
 void
 setfullscreen(Client *c, int fullscreen)
 {
@@ -1059,7 +1049,7 @@ setfullscreen(Client *c, int fullscreen)
 		c->prevy = c->geom.y;
 		c->prevheight = c->geom.height;
 		c->prevwidth = c->geom.width;
-		maximizeclient(c);
+		resize(c, c->mon->m.x, c->mon->m.y, c->mon->m.width, c->mon->m.height, 0);
 	} else {
 		/* restore previous size instead of arrange for floating windows since
 		 * client positions are set by the user and cannot be recalculated */
@@ -1356,12 +1346,9 @@ monocle(Monitor *m)
 	Client *c;
 
 	wl_list_for_each(c, &clients, link) {
-		if (!VISIBLEON(c, m) || c->isfloating)
+		if (!VISIBLEON(c, m) || c->isfloating || c->isfullscreen)
 			continue;
-		if (c->isfullscreen)
-			maximizeclient(c);
-		else
-			resize(c, m->w.x, m->w.y, m->w.width, m->w.height, 0);
+		resize(c, m->w.x, m->w.y, m->w.width, m->w.height, 0);
 	}
 }
 
@@ -2179,12 +2166,8 @@ tile(Monitor *m)
 		mw = m->w.width;
 	i = my = ty = 0;
 	wl_list_for_each(c, &clients, link) {
-		if (!VISIBLEON(c, m) || c->isfloating)
-			continue;
-		if (c->isfullscreen) {
-			maximizeclient(c);
+		if (!VISIBLEON(c, m) || c->isfloating || c->isfullscreen)
 			continue;
-		}
 		if (i < m->nmaster) {
 			h = (m->w.height - my) / (MIN(n, m->nmaster) - i);
 			resize(c, m->w.x, m->w.y + my, mw, h, 0);

From 461fa9906828f558acf27736ab11f539d31b7706 Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Thu, 11 Feb 2021 11:26:37 +0100
Subject: [PATCH 10/15] Hide other clients and waybar behind fullscreen

This feature is mainly meant to be able to see only the wallpaper behind
a fullscreen transparent terminal

If a client is focused and is fullscreen, bottom layer shell and other
clients aren't rendered on that client's monitor

This is the second version of the patch, based on the updated master and
fullscreen branches, with a simpler implementation and cleaner history
---
 dwl.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/dwl.c b/dwl.c
index 85c4e1ad5..24d676f87 100644
--- a/dwl.c
+++ b/dwl.c
@@ -175,6 +175,7 @@ struct Monitor {
 	unsigned int tagset[2];
 	double mfact;
 	int nmaster;
+	Client *focus;
 };
 
 typedef struct {
@@ -815,6 +816,7 @@ createmon(struct wl_listener *listener, void *data)
 	const MonitorRule *r;
 	Monitor *m = wlr_output->data = calloc(1, sizeof(*m));
 	m->wlr_output = wlr_output;
+	m->focus = NULL;
 
 	/* Initialize monitor state using configured rules */
 	for (size_t i = 0; i < LENGTH(m->layers); i++)
@@ -1099,6 +1101,7 @@ focusclient(Client *c, int lift)
 		wl_list_remove(&c->flink);
 		wl_list_insert(&fstack, &c->flink);
 		selmon = c->mon;
+		c->mon->focus = c;
 	}
 
 	/* Deactivate old client if focus is changing */
@@ -1649,12 +1652,14 @@ renderclients(Monitor *m, struct timespec *now)
 	struct render_data rdata;
 	struct wlr_box *borders;
 	struct wlr_surface *surface;
+	bool hide = m->focus && m->focus->isfullscreen;
 	/* Each subsequent window we render is rendered on top of the last. Because
 	 * our stacking list is ordered front-to-back, we iterate over it backwards. */
 	wl_list_for_each_reverse(c, &stack, slink) {
 		/* Only render visible clients which show on this monitor */
 		if (!VISIBLEON(c, c->mon) || !wlr_output_layout_intersects(
-					output_layout, m->wlr_output, &c->geom))
+					output_layout, m->wlr_output, &c->geom) ||
+				(hide && c != m->focus)) /* only render the focused fullscreen client */
 			continue;
 
 		surface = client_surface(c);
@@ -1739,7 +1744,8 @@ rendermon(struct wl_listener *listener, void *data)
 		wlr_renderer_clear(drw, rootcolor);
 
 		renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BACKGROUND], &now);
-		renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BOTTOM], &now);
+		if (!m->focus || !m->focus->isfullscreen) /* render waybar and similar */
+			renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BOTTOM], &now);
 		renderclients(m, &now);
 #ifdef XWAYLAND
 		renderindependents(m->wlr_output, &now);

From e718e2ab4ac099628a2c4aeb3104224661be31c8 Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Thu, 11 Feb 2021 16:45:08 +0100
Subject: [PATCH 11/15] Fix waybar disappearing with no clients

It seems like mon->focus doesn't become NULL when all the clients in
that monitor are moved or killed, so bottom layer shell wasn't sometimes
rendered when there were no clients on that monitor
(in that situation waybar also flickered for some reason)
---
 dwl.c | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/dwl.c b/dwl.c
index 24d676f87..32d023ef3 100644
--- a/dwl.c
+++ b/dwl.c
@@ -176,6 +176,7 @@ struct Monitor {
 	double mfact;
 	int nmaster;
 	Client *focus;
+	unsigned int nclients;
 };
 
 typedef struct {
@@ -817,6 +818,7 @@ createmon(struct wl_listener *listener, void *data)
 	Monitor *m = wlr_output->data = calloc(1, sizeof(*m));
 	m->wlr_output = wlr_output;
 	m->focus = NULL;
+	m->nclients = 0;
 
 	/* Initialize monitor state using configured rules */
 	for (size_t i = 0; i < LENGTH(m->layers); i++)
@@ -1341,6 +1343,7 @@ mapnotify(struct wl_listener *listener, void *data)
 
 	/* Set initial monitor, tags, floating status, and focus */
 	applyrules(c);
+	++c->mon->nclients;
 }
 
 void
@@ -1744,7 +1747,7 @@ rendermon(struct wl_listener *listener, void *data)
 		wlr_renderer_clear(drw, rootcolor);
 
 		renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BACKGROUND], &now);
-		if (!m->focus || !m->focus->isfullscreen) /* render waybar and similar */
+		if (!(m->nclients && m->focus->isfullscreen)) /* render waybar and similar */
 			renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BOTTOM], &now);
 		renderclients(m, &now);
 #ifdef XWAYLAND
@@ -1923,6 +1926,7 @@ setmon(Client *c, Monitor *m, unsigned int newtags)
 	if (oldmon) {
 		wlr_surface_send_leave(client_surface(c), oldmon->wlr_output);
 		arrange(oldmon);
+		--oldmon->nclients;
 	}
 	if (m) {
 		/* Make sure window actually overlaps with the monitor */
@@ -1930,6 +1934,7 @@ setmon(Client *c, Monitor *m, unsigned int newtags)
 		wlr_surface_send_enter(client_surface(c), m->wlr_output);
 		c->tags = newtags ? newtags : m->tagset[m->seltags]; /* assign tags of target monitor */
 		arrange(m);
+		++m->nclients;
 	}
 	focusclient(focustop(selmon), 1);
 }
@@ -2171,6 +2176,7 @@ tile(Monitor *m)
 	else
 		mw = m->w.width;
 	i = my = ty = 0;
+
 	wl_list_for_each(c, &clients, link) {
 		if (!VISIBLEON(c, m) || c->isfloating || c->isfullscreen)
 			continue;
@@ -2246,6 +2252,7 @@ unmapnotify(struct wl_listener *listener, void *data)
 {
 	/* Called when the surface is unmapped, and should no longer be shown. */
 	Client *c = wl_container_of(listener, c, unmap);
+	--c->mon->nclients;
 	wl_list_remove(&c->link);
 	if (client_is_unmanaged(c))
 		return;
@@ -2419,6 +2426,7 @@ createnotifyx11(struct wl_listener *listener, void *data)
 	c->type = xwayland_surface->override_redirect ? X11Unmanaged : X11Managed;
 	c->bw = borderpx;
 	c->isfullscreen = 0;
+	++c->mon->nclients;
 
 	/* Listen to the various events it can emit */
 	LISTEN(&xwayland_surface->events.map, &c->map, mapnotify);

From 45e8da4e471f01bef939c6f871f5813c6c189eb4 Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Fri, 12 Feb 2021 11:02:20 +0100
Subject: [PATCH 12/15] Fix crash creating xwayland clients

c->mon is still null in createnotify, c->mon->nclients must be changed
in mapnotify
---
 dwl.c | 1 -
 1 file changed, 1 deletion(-)

diff --git a/dwl.c b/dwl.c
index 32d023ef3..dc922d73a 100644
--- a/dwl.c
+++ b/dwl.c
@@ -2426,7 +2426,6 @@ createnotifyx11(struct wl_listener *listener, void *data)
 	c->type = xwayland_surface->override_redirect ? X11Unmanaged : X11Managed;
 	c->bw = borderpx;
 	c->isfullscreen = 0;
-	++c->mon->nclients;
 
 	/* Listen to the various events it can emit */
 	LISTEN(&xwayland_surface->events.map, &c->map, mapnotify);

From 807b2ad2d64dc563eacc47448239a3a3f837fdf3 Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Sun, 14 Feb 2021 18:52:47 +0100
Subject: [PATCH 13/15] Fix crash on xwayland (toplevel->activated)

Xwayland clients don't have the same structure. The
toplevel->current.activated thing was meant to avoid selclient() in
render, but that would require a separate check for xwayland clients, so
it isn't worth it any more
---
 dwl.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dwl.c b/dwl.c
index 85c4e1ad5..fa8339627 100644
--- a/dwl.c
+++ b/dwl.c
@@ -1642,7 +1642,7 @@ render(struct wlr_surface *surface, int sx, int sy, void *data)
 void
 renderclients(Monitor *m, struct timespec *now)
 {
-	Client *c;
+	Client *c, *sel = selclient();
 	const float *color;
 	double ox, oy;
 	int i, w, h;
@@ -1673,7 +1673,7 @@ renderclients(Monitor *m, struct timespec *now)
 			};
 
 			/* Draw window borders */
-			color = (c->surface.xdg->toplevel->current.activated) ? focuscolor : bordercolor;
+			color = (c == sel) ? focuscolor : bordercolor;
 			for (i = 0; i < 4; i++) {
 				scalebox(&borders[i], m->wlr_output->scale);
 				wlr_render_rect(drw, &borders[i], color,

From d8827d6d1cb072210d1d4816ad3fb4dda3f9ade7 Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Mon, 15 Feb 2021 10:02:29 +0100
Subject: [PATCH 14/15] Fix waybar disappearing (remove Monitor->nclients)

nclients isn't an accurate way to determine if the bottom layer shell
should be rendered because it doesn't take into account if
Monitor->focus is visible in that moment
---
 dwl.c | 8 +-------
 1 file changed, 1 insertion(+), 7 deletions(-)

diff --git a/dwl.c b/dwl.c
index 58dc6a190..b700e19cd 100644
--- a/dwl.c
+++ b/dwl.c
@@ -176,7 +176,6 @@ struct Monitor {
 	double mfact;
 	int nmaster;
 	Client *focus;
-	unsigned int nclients;
 };
 
 typedef struct {
@@ -818,7 +817,6 @@ createmon(struct wl_listener *listener, void *data)
 	Monitor *m = wlr_output->data = calloc(1, sizeof(*m));
 	m->wlr_output = wlr_output;
 	m->focus = NULL;
-	m->nclients = 0;
 
 	/* Initialize monitor state using configured rules */
 	for (size_t i = 0; i < LENGTH(m->layers); i++)
@@ -1343,7 +1341,6 @@ mapnotify(struct wl_listener *listener, void *data)
 
 	/* Set initial monitor, tags, floating status, and focus */
 	applyrules(c);
-	++c->mon->nclients;
 }
 
 void
@@ -1747,7 +1744,7 @@ rendermon(struct wl_listener *listener, void *data)
 		wlr_renderer_clear(drw, rootcolor);
 
 		renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BACKGROUND], &now);
-		if (!(m->nclients && m->focus->isfullscreen)) /* render waybar and similar */
+		if (!(m->focus && VISIBLEON(m->focus, m) && m->focus->isfullscreen)) /* render waybar and similar */
 			renderlayer(&m->layers[ZWLR_LAYER_SHELL_V1_LAYER_BOTTOM], &now);
 		renderclients(m, &now);
 #ifdef XWAYLAND
@@ -1926,7 +1923,6 @@ setmon(Client *c, Monitor *m, unsigned int newtags)
 	if (oldmon) {
 		wlr_surface_send_leave(client_surface(c), oldmon->wlr_output);
 		arrange(oldmon);
-		--oldmon->nclients;
 	}
 	if (m) {
 		/* Make sure window actually overlaps with the monitor */
@@ -1934,7 +1930,6 @@ setmon(Client *c, Monitor *m, unsigned int newtags)
 		wlr_surface_send_enter(client_surface(c), m->wlr_output);
 		c->tags = newtags ? newtags : m->tagset[m->seltags]; /* assign tags of target monitor */
 		arrange(m);
-		++m->nclients;
 	}
 	focusclient(focustop(selmon), 1);
 }
@@ -2252,7 +2247,6 @@ unmapnotify(struct wl_listener *listener, void *data)
 {
 	/* Called when the surface is unmapped, and should no longer be shown. */
 	Client *c = wl_container_of(listener, c, unmap);
-	--c->mon->nclients;
 	wl_list_remove(&c->link);
 	if (client_is_unmanaged(c))
 		return;

From 7187618d81adba0489e6164760861df4ba21163d Mon Sep 17 00:00:00 2001
From: Stivvo <stivvo01@gmail.com>
Date: Fri, 19 Feb 2021 12:35:00 +0100
Subject: [PATCH 15/15] Fix crash fullscreen without clients

Pressing mod + e (togglefullscreen) in a tag without clients caused dwl
to crash because selclient() returned NULL
---
 dwl.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/dwl.c b/dwl.c
index fa8339627..202bfa0c1 100644
--- a/dwl.c
+++ b/dwl.c
@@ -1034,7 +1034,8 @@ void
 togglefullscreen(const Arg *arg)
 {
 	Client *sel = selclient();
-	setfullscreen(sel, !sel->isfullscreen);
+	if (sel)
+		setfullscreen(sel, !sel->isfullscreen);
 }
 
 void
