From 0568773e46815870935276834e6140e0ba6caccc Mon Sep 17 00:00:00 2001
From: wochap <gean.marroquin@gmail.com>
Date: Sat, 9 Sep 2023 07:57:47 -0500
Subject: [PATCH] Add swipe gestures to trigger functions

Like libinput-gestures, it supports the following gestures: SWIPE_UP, SWIPE_DOWN, SWIPE_LEFT and SWIPE_RIGHT
---
 config.def.h | 10 +++++++++
 dwl.c        | 59 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 69 insertions(+)

diff --git a/config.def.h b/config.def.h
index 1677f6f12..f94b374d3 100644
--- a/config.def.h
+++ b/config.def.h
@@ -7,6 +7,9 @@ static const float focuscolor[]            = {1.0, 0.0, 0.0, 1.0};
 /* To conform the xdg-protocol, set the alpha to zero to restore the old behavior */
 static const float fullscreen_bg[]         = {0.1, 0.1, 0.1, 1.0};
 
+static const unsigned int swipe_min_threshold = 0;
+static const int swipe_fingers_count       = 3;
+
 /* tagging - tagcount must be no greater than 31 */
 #define TAGCOUNT (9)
 static const int tagcount = TAGCOUNT;
@@ -156,3 +159,10 @@ static const Button buttons[] = {
 	{ MODKEY, BTN_MIDDLE, togglefloating, {0} },
 	{ MODKEY, BTN_RIGHT,  moveresize,     {.ui = CurResize} },
 };
+
+static const Gesture gestures[] = {
+	// { SWIPE_LEFT, shiftview, { .i = 1 } },
+	// { SWIPE_RIGHT, shiftview, { .i = -1 } },
+	{ SWIPE_UP, focusstack, {.i = 1} },
+	{ SWIPE_DOWN, focusstack, {.i = -1} },
+};
diff --git a/dwl.c b/dwl.c
index de8180960..57a3d5504 100644
--- a/dwl.c
+++ b/dwl.c
@@ -80,6 +80,7 @@ enum { LyrBg, LyrBottom, LyrTile, LyrFloat, LyrFS, LyrTop, LyrOverlay, LyrBlock,
 enum { NetWMWindowTypeDialog, NetWMWindowTypeSplash, NetWMWindowTypeToolbar,
 	NetWMWindowTypeUtility, NetLast }; /* EWMH atoms */
 #endif
+enum { SWIPE_LEFT, SWIPE_RIGHT, SWIPE_DOWN, SWIPE_UP };
 
 typedef union {
 	int i;
@@ -95,6 +96,12 @@ typedef struct {
 	const Arg arg;
 } Button;
 
+typedef struct {
+	unsigned int motion;
+	void (*func)(const Arg *);
+	const Arg arg;
+} Gesture;
+
 typedef struct Monitor Monitor;
 typedef struct {
 	/* Must keep these three elements in this order */
@@ -375,6 +382,10 @@ static struct wlr_box sgeom;
 static struct wl_list mons;
 static Monitor *selmon;
 
+static uint32_t swipe_fingers = 0;
+static double swipe_dx = 0;
+static double swipe_dy = 0;
+
 /* global event handlers */
 static struct wl_listener cursor_axis = {.notify = axisnotify};
 static struct wl_listener cursor_button = {.notify = buttonpress};
@@ -427,6 +438,8 @@ static Atom netatom[NetLast];
 /* attempt to encapsulate suck into one file */
 #include "client.h"
 
+static const unsigned int abzsquare = swipe_min_threshold * swipe_min_threshold;
+
 /* function implementations */
 void
 applybounds(Client *c, struct wlr_box *bbox)
@@ -643,6 +656,15 @@ swipe_begin(struct wl_listener *listener, void *data)
 {
 	struct wlr_pointer_swipe_begin_event *event = data;
 
+	if (event->fingers == swipe_fingers_count) {
+		swipe_fingers = event->fingers;
+		// Reset swipe distance at the beginning of a swipe
+		swipe_dx = 0;
+		swipe_dy = 0;
+
+		return;
+	}
+
 	// Forward swipe begin event to client
 	wlr_pointer_gestures_v1_send_swipe_begin(
 		pointer_gestures, 
@@ -657,6 +679,14 @@ swipe_update(struct wl_listener *listener, void *data)
 {
 	struct wlr_pointer_swipe_update_event *event = data;
 
+	if (swipe_fingers == swipe_fingers_count) {
+		// Accumulate swipe distance
+		swipe_dx += event->dx;
+		swipe_dy += event->dy;
+
+		return;
+	}
+
 	// Forward swipe update event to client
 	wlr_pointer_gestures_v1_send_swipe_update(
 		pointer_gestures, 
@@ -671,6 +701,35 @@ void
 swipe_end(struct wl_listener *listener, void *data)
 {
 	struct wlr_pointer_swipe_end_event *event = data;
+	const Gesture *g;
+	unsigned int motion;
+	unsigned int adx = fabs(swipe_dx);
+	unsigned int ady = fabs(swipe_dy);
+
+	if (swipe_fingers == swipe_fingers_count) {
+		if (event->cancelled) {
+			return;
+		}
+
+		// Require absolute distance movement beyond a small thresh-hold
+		if (adx * adx + ady * ady < abzsquare) {
+			return;
+		}
+
+		if (adx > ady) {
+			motion = swipe_dx < 0 ? SWIPE_LEFT : SWIPE_RIGHT;
+		} else {
+			motion = swipe_dy < 0 ? SWIPE_UP : SWIPE_DOWN;
+		}
+
+		for (g = gestures; g < END(gestures); g++) {
+			if (motion == g->motion && g->func) {
+				g->func(&g->arg);
+			}
+		}
+
+		return;
+	}
 
 	// Forward swipe end event to client
 	wlr_pointer_gestures_v1_send_swipe_end(
