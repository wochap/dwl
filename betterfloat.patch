From b1a3628d4e78a5ff620d720dd3330a792d3dffcd Mon Sep 17 00:00:00 2001
From: wochap <gean.marroquin@gmail.com>
Date: Sun, 28 Jul 2024 18:58:33 -0500
Subject: [PATCH 1/4] implement betterfloat

---
 client.h     |  25 ++++++++
 config.def.h |  19 +++++-
 dwl.c        | 172 +++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 213 insertions(+), 3 deletions(-)

diff --git a/client.h b/client.h
index f0e5445..fb7045f 100644
--- a/client.h
+++ b/client.h
@@ -131,6 +131,31 @@ client_get_appid(Client *c)
 	return c->surface.xdg->toplevel->app_id;
 }
 
+static inline void
+client_get_size_hints(Client *c, struct wlr_box *max, struct wlr_box *min)
+{
+	struct wlr_xdg_toplevel *toplevel;
+	struct wlr_xdg_toplevel_state *state;
+#ifdef XWAYLAND
+	if (client_is_x11(c)) {
+		xcb_size_hints_t *size_hints = c->surface.xwayland->size_hints;
+		if (size_hints) {
+			max->width = size_hints->max_width;
+			max->height = size_hints->max_height;
+			min->width = size_hints->min_width;
+			min->height = size_hints->min_height;
+		}
+		return;
+	}
+#endif
+	toplevel = c->surface.xdg->toplevel;
+	state = &toplevel->current;
+	max->width = state->max_width;
+	max->height = state->max_height;
+	min->width = state->min_width;
+	min->height = state->min_height;
+}
+
 static inline void
 client_get_clip(Client *c, struct wlr_box *clip)
 {
diff --git a/config.def.h b/config.def.h
index 22d2171..00f5f56 100644
--- a/config.def.h
+++ b/config.def.h
@@ -13,6 +13,7 @@ static const float focuscolor[]            = COLOR(0x005577ff);
 static const float urgentcolor[]           = COLOR(0xff0000ff);
 /* This conforms to the xdg-protocol. Set the alpha to zero to restore the old behavior */
 static const float fullscreen_bg[]         = {0.1f, 0.1f, 0.1f, 1.0f}; /* You can also use glsl colors */
+static const int respect_monitor_reserved_area = 0;  /* 1 to monitor center while respecting the monitor's reserved area, 0 to monitor center */
 
 /* tagging - TAGCOUNT must be no greater than 31 */
 #define TAGCOUNT (9)
@@ -22,10 +23,10 @@ static int log_level = WLR_ERROR;
 
 /* NOTE: ALWAYS keep a rule declared even if you don't use rules (e.g leave at least one example) */
 static const Rule rules[] = {
-	/* app_id             title       tags mask     isfloating   monitor */
+	/* app_id             title       tags mask     isfloating   monitor   x   y   width   height */
 	/* examples: */
-	{ "Gimp_EXAMPLE",     NULL,       0,            1,           -1 }, /* Start on currently visible tags floating, not tiled */
-	{ "firefox_EXAMPLE",  NULL,       1 << 8,       0,           -1 }, /* Start on ONLY tag "9" */
+	{ "Gimp_EXAMPLE",     NULL,       0,            1,           -1,       0,  0,  1000,   0.75f }, /* Start on currently visible tags floating, not tiled */
+	{ "firefox_EXAMPLE",  NULL,       1 << 8,       0,           -1,       0,  0,  0,      0 },/* Start on ONLY tag "9" */
 };
 
 /* layout(s) */
@@ -36,6 +37,13 @@ static const Layout layouts[] = {
 	{ "[M]",      monocle },
 };
 
+/* size(s) */
+static const Size sizes[] = {
+	/* width   height */
+	{ 1000,    0.75f },
+	{ 500,     0.5f },
+};
+
 /* monitors */
 /* (x=-1, y=-1) is reserved as an "autoconfigure" monitor position indicator
  * WARNING: negative values other than (-1, -1) cause problems with Xwayland clients
@@ -140,8 +148,13 @@ static const Key keys[] = {
 	{ MODKEY,                    XKB_KEY_f,          setlayout,      {.v = &layouts[1]} },
 	{ MODKEY,                    XKB_KEY_m,          setlayout,      {.v = &layouts[2]} },
 	{ MODKEY,                    XKB_KEY_space,      setlayout,      {0} },
+	{ MODKEY,                    XKB_KEY_b,          setsize,        {.v = &sizes[0]} },
+	{ MODKEY,                    XKB_KEY_n,          setsize,        {.v = &sizes[1]} },
+	{ MODKEY,                    XKB_KEY_c,          setminsize,     {0} },
+	{ MODKEY,                    XKB_KEY_v,          setmaxsize,     {0} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_space,      togglefloating, {0} },
 	{ MODKEY,                    XKB_KEY_e,         togglefullscreen, {0} },
+	{ MODKEY,                    XKB_KEY_x,          movecenter,     {0} },
 	{ MODKEY,                    XKB_KEY_0,          view,           {.ui = ~0} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_parenright, tag,            {.ui = ~0} },
 	{ MODKEY,                    XKB_KEY_comma,      focusmon,       {.i = WLR_DIRECTION_LEFT} },
diff --git a/dwl.c b/dwl.c
index 145fd01..76c42dd 100644
--- a/dwl.c
+++ b/dwl.c
@@ -185,6 +185,11 @@ typedef struct {
 	void (*arrange)(Monitor *);
 } Layout;
 
+typedef struct {
+	float w;
+	float h;
+} Size;
+
 struct Monitor {
 	struct wl_list link;
 	struct wlr_output *wlr_output;
@@ -230,6 +235,10 @@ typedef struct {
 	uint32_t tags;
 	int isfloating;
 	int monitor;
+	float x;
+	float y;
+	float w;
+	float h;
 } Rule;
 
 typedef struct {
@@ -324,6 +333,9 @@ static void setfloating(Client *c, int floating);
 static void setfullscreen(Client *c, int fullscreen);
 static void setgamma(struct wl_listener *listener, void *data);
 static void setlayout(const Arg *arg);
+static void setsize(const Arg *arg);
+static void setminsize(const Arg *arg);
+static void setmaxsize(const Arg *arg);
 static void setmfact(const Arg *arg);
 static void setmon(Client *c, Monitor *m, uint32_t newtags);
 static void setpsel(struct wl_listener *listener, void *data);
@@ -336,6 +348,8 @@ static void tagmon(const Arg *arg);
 static void tile(Monitor *m);
 static void togglefloating(const Arg *arg);
 static void togglefullscreen(const Arg *arg);
+static void _movecenter(Client *c, int interact);
+static void movecenter(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
 static void unlocksession(struct wl_listener *listener, void *data);
@@ -454,6 +468,12 @@ applyrules(Client *c)
 	int i;
 	const Rule *r;
 	Monitor *mon = selmon, *m;
+	struct wlr_box b;
+	int newx;
+	int newy;
+	int neww;
+	int newh;
+	int apply_resize = 0;
 
 	c->isfloating = client_is_float_type(c);
 	if (!(appid = client_get_appid(c)))
@@ -471,9 +491,35 @@ applyrules(Client *c)
 				if (r->monitor == i++)
 					mon = m;
 			}
+			if (c->isfloating || !mon->lt[mon->sellt]->arrange) {
+				/* client is floating or in floating layout */
+				b = respect_monitor_reserved_area ? mon->w : mon->m;
+				neww = (int)round(r->w ? (r->w <= 1 ? b.width * r->w : r->w) : c->geom.width);
+				newh = (int)round(r->h ? (r->h <= 1 ? b.height * r->h : r->h) : c->geom.height);
+				newx = (int)round(r->x
+					? (r->x > 0
+						? (r->x <= 1 ? b.width * r->x + b.x : r->x + b.x)
+						: (r->x >= -1 ? b.width + b.width * r->x + b.x - neww : b.width + r->x + b.x - neww))
+					: c->geom.x);
+				newy = (int)round(r->y
+					? (r->y > 0
+						? (r->y <= 1 ? b.height * r->y + b.y : r->y + b.y)
+						: (r->y >= -1 ? b.height + b.height * r->y + b.y - newh : b.height + r->y + b.y - newh))
+					: c->geom.y);
+				apply_resize = 1;
+			}
 		}
 	}
 	setmon(c, mon, newtags);
+
+	if (apply_resize) {
+		resize(c, (struct wlr_box){
+			.x = newx,
+			.y = newy,
+			.width = neww,
+			.height = newh,
+		}, 1);
+	}
 }
 
 void
@@ -1641,6 +1687,7 @@ mapnotify(struct wl_listener *listener, void *data)
 	Client *p, *w, *c = wl_container_of(listener, c, map);
 	Monitor *m;
 	int i;
+	struct wlr_box b;
 
 	/* Create scene tree for this client and its border */
 	c->scene = client_surface(c)->data = wlr_scene_tree_create(layers[LyrTile]);
@@ -1689,6 +1736,14 @@ mapnotify(struct wl_listener *listener, void *data)
 	} else {
 		applyrules(c);
 	}
+
+	if (c->isfloating || !c->mon->lt[c->mon->sellt]->arrange) {
+		/* client is floating or in floating layout */
+		b = respect_monitor_reserved_area ? c->mon->w : c->mon->m;
+		c->geom.x = (b.width - c->geom.width) / 2 + b.x;
+		c->geom.y = (b.height - c->geom.height) / 2 + b.y;
+	}
+
 	printstatus();
 
 unset_fullscreen:
@@ -2313,6 +2368,91 @@ setlayout(const Arg *arg)
 	printstatus();
 }
 
+void
+setsize(const Arg *arg)
+{
+	const Size *size = (const Size *)arg->v;
+	Client *c = focustop(selmon);
+	struct wlr_box b;
+	int neww;
+	int newh;
+
+	if (!selmon || !arg || !arg->v || !c || !c->mon) {
+		return;
+	}
+
+	if (c->isfloating || !c->mon->lt[c->mon->sellt]->arrange) {
+		/* client is floating or in floating layout */
+		b = respect_monitor_reserved_area ? c->mon->w : c->mon->m;
+		neww = (int)round(size->w ? (size->w <= 1 ? b.width * size->w : size->w) : c->geom.width);
+		newh = (int)round(size->h ? (size->h <= 1 ? b.height * size->h : size->h) : c->geom.height);
+		resize(c, (struct wlr_box){
+			.x = (b.width - neww) / 2 + b.x,
+			.y = (b.height - newh) / 2 + b.y,
+			.width = neww,
+			.height = newh,
+		}, 1);
+	}
+}
+
+void
+setminsize(const Arg *arg)
+{
+	struct wlr_box min = {0}, max = {0};
+	Client *c = focustop(selmon);
+	struct wlr_box b;
+	int neww;
+	int newh;
+
+	if (!selmon || !c || !c->mon) {
+		return;
+	}
+
+	client_get_size_hints(c, &max, &min);
+
+	if (c->isfloating || !c->mon->lt[c->mon->sellt]->arrange) {
+		/* client is floating or in floating layout */
+		b = respect_monitor_reserved_area ? c->mon->w : c->mon->m;
+		neww = (int)round(min.width == 0 ? c->geom.width : MAX(50, min.width));
+		newh = (int)round(min.height == 0 ? c->geom.height : MAX(50, min.height));
+		resize(c, (struct wlr_box){
+			.x = (b.width - neww) / 2 + b.x,
+			.y = (b.height - newh) / 2 + b.y,
+			.width = neww,
+			.height = newh,
+		}, 1);
+	}
+}
+
+void
+setmaxsize(const Arg *arg)
+{
+	struct wlr_box min = {0}, max = {0};
+	Client *c = focustop(selmon);
+	struct wlr_box b;
+	int neww;
+	int newh;
+
+	if (!selmon || !c || !c->mon) {
+		return;
+	}
+
+	client_get_size_hints(c, &max, &min);
+
+	if (c->isfloating || !c->mon->lt[c->mon->sellt]->arrange) {
+		/* client is floating or in floating layout */
+		b = respect_monitor_reserved_area ? c->mon->w : c->mon->m;
+		neww = (int)round(max.width == 0 ? c->geom.width : max.width);
+		newh = (int)round(max.height == 0 ? c->geom.height : max.height);
+		resize(c, (struct wlr_box){
+			.x = (b.width - neww) / 2 + b.x,
+			.y = (b.height - newh) / 2 + b.y,
+			.width = neww,
+			.height = newh,
+		}, 1);
+	}
+}
+
 /* arg > 1.0 will set mfact absolutely */
 void
 setmfact(const Arg *arg)
@@ -2347,6 +2487,10 @@ setmon(Client *c, Monitor *m, uint32_t newtags)
 		c->tags = newtags ? newtags : m->tagset[m->seltags]; /* assign tags of target monitor */
 		setfullscreen(c, c->isfullscreen); /* This will call arrange(c->mon) */
 		setfloating(c, c->isfloating);
+		if (c->isfloating || !c->mon->lt[c->mon->sellt]->arrange) {
+			/* client is floating or in floating layout */
+			_movecenter(c, 0);
+		}
 	}
 	focusclient(focustop(selmon), 1);
 }
@@ -2683,6 +2827,34 @@ togglefullscreen(const Arg *arg)
 		setfullscreen(sel, !sel->isfullscreen);
 }
 
+void
+_movecenter(Client *c, int interact)
+{
+	struct wlr_box b;
+
+	if (!c || !c->mon) {
+		return;
+	}
+
+	if (c->isfloating || !c->mon->lt[c->mon->sellt]->arrange) {
+		/* client is floating or in floating layout */
+		b = respect_monitor_reserved_area ? c->mon->w : c->mon->m;
+		resize(c, (struct wlr_box){
+			.x = (b.width - c->geom.width) / 2 + b.x,
+			.y = (b.height - c->geom.height) / 2 + b.y,
+			.width = c->geom.width,
+			.height = c->geom.height,
+		}, interact);
+	}
+}
+
+void
+movecenter(const Arg *arg)
+{
+	Client *c = focustop(selmon);
+	_movecenter(c, 1);
+}
+
 void
 toggletag(const Arg *arg)
 {
-- 
2.45.2


From b95f9bad72b20e079fee43c802b73d8bffafba47 Mon Sep 17 00:00:00 2001
From: wochap <gean.marroquin@gmail.com>
Date: Sun, 28 Jul 2024 19:34:00 -0500
Subject: [PATCH 2/4] f

---
 dwl.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dwl.c b/dwl.c
index 76c42dd..d4f3603 100644
--- a/dwl.c
+++ b/dwl.c
@@ -1740,8 +1740,8 @@ mapnotify(struct wl_listener *listener, void *data)
 	if (c->isfloating || !c->mon->lt[c->mon->sellt]->arrange) {
 		/* client is floating or in floating layout */
 		b = respect_monitor_reserved_area ? c->mon->w : c->mon->m;
-		c->geom.x = (b.width - c->geom.width) / 2 + b.x;
-		c->geom.y = (b.height - c->geom.height) / 2 + b.y;
+		c->geom.x = c->geom.x == 0 ? (b.width - c->geom.width) / 2 + b.x : c->geom.x;
+		c->geom.y = c->geom.y == 0 ? (b.height - c->geom.height) / 2 + b.y : c->geom.y;
 	}
 
 	printstatus();
-- 
2.45.2


From a257d41d76c83a0972d58cc2cef7e51aa401b438 Mon Sep 17 00:00:00 2001
From: wochap <gean.marroquin@gmail.com>
Date: Wed, 31 Jul 2024 08:46:14 -0500
Subject: [PATCH 3/4] fix

---
 dwl.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dwl.c b/dwl.c
index d4f3603..4969f06 100644
--- a/dwl.c
+++ b/dwl.c
@@ -500,12 +500,12 @@ applyrules(Client *c)
 					? (r->x > 0
 						? (r->x <= 1 ? b.width * r->x + b.x : r->x + b.x)
 						: (r->x >= -1 ? b.width + b.width * r->x + b.x - neww : b.width + r->x + b.x - neww))
-					: c->geom.x);
+					: 0);
 				newy = (int)round(r->y
 					? (r->y > 0
 						? (r->y <= 1 ? b.height * r->y + b.y : r->y + b.y)
 						: (r->y >= -1 ? b.height + b.height * r->y + b.y - newh : b.height + r->y + b.y - newh))
-					: c->geom.y);
+					: 0);
 				apply_resize = 1;
 			}
 		}
-- 
2.45.2


From 32884d29d07e78f7517cc4e30b36afc7fa697581 Mon Sep 17 00:00:00 2001
From: wochap <gean.marroquin@gmail.com>
Date: Sun, 11 Aug 2024 09:26:49 -0500
Subject: [PATCH 4/4] feat: make window float on setsize

---
 dwl.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/dwl.c b/dwl.c
index 4969f06..f9f5d53 100644
--- a/dwl.c
+++ b/dwl.c
@@ -2381,6 +2381,10 @@ setsize(const Arg *arg)
 		return;
 	}
 
+	if (!c->isfloating && !c->isfullscreen) {
+		setfloating(c, 1);
+	}
+
 	if (c->isfloating || !c->mon->lt[c->mon->sellt]->arrange) {
 		/* client is floating or in floating layout */
 		b = respect_monitor_reserved_area ? c->mon->w : c->mon->m;
-- 
2.45.2

