From 1b03fdfeb024b61c6705885113580a5bf64d6061 Mon Sep 17 00:00:00 2001
From: wochap <gean.marroquin@gmail.com>
Date: Thu, 11 Apr 2024 10:57:33 -0500
Subject: [PATCH 1/4] implement scratchpads and namedscratchpads

apply scratchpads
apply reporting-namedscratchpads
apply namedscratchpads with modifications
apply reporting-scratchpads
---
 config.def.h |  15 +++--
 dwl.c        | 159 +++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 170 insertions(+), 4 deletions(-)

diff --git a/config.def.h b/config.def.h
index 8847e58..edc13dd 100644
--- a/config.def.h
+++ b/config.def.h
@@ -21,10 +21,11 @@ static const float fullscreen_bg[]         = {0.1f, 0.1f, 0.1f, 1.0f}; /* You ca
 static int log_level = WLR_ERROR;
 
 static const Rule rules[] = {
-	/* app_id             title       tags mask     isfloating   monitor */
+	/* app_id             title       tags mask     isfloating   monitor   scratchkey */
 	/* examples: */
-	{ "Gimp_EXAMPLE",     NULL,       0,            1,           -1 }, /* Start on currently visible tags floating, not tiled */
-	{ "firefox_EXAMPLE",  NULL,       1 << 8,       0,           -1 }, /* Start on ONLY tag "9" */
+	{ "Gimp_EXAMPLE",     NULL,       0,            1,           -1,       0 }, /* Start on currently visible tags floating, not tiled */
+	{ "firefox_EXAMPLE",  NULL,       1 << 8,       0,           -1,       0 }, /* Start on ONLY tag "9" */
+	{ NULL,               "scratchpad", 1 << 8,     0,           -1,       's' }, /* Start on ONLY tag "9" */
 };
 
 /* layout(s) */
@@ -117,11 +118,15 @@ static const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TA
 static const char *termcmd[] = { "foot", NULL };
 static const char *menucmd[] = { "bemenu-run", NULL };
 
+/* named scratchpads - First arg only serves to match against key in rules*/
+static const char *scratchpadcmd[] = { "s", "alacritty", "-t", "scratchpad", NULL };
+
 static const Key keys[] = {
 	/* Note that Shift changes certain key codes: c -> C, 2 -> at, etc. */
 	/* modifier                  key                 function        argument */
 	{ MODKEY,                    XKB_KEY_p,          spawn,          {.v = menucmd} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Return,     spawn,          {.v = termcmd} },
+	{ MODKEY,                    XKB_KEY_grave,      raiserunnamedscratchpad, {.v = scratchpadcmd } },
 	{ MODKEY,                    XKB_KEY_j,          focusstack,     {.i = +1} },
 	{ MODKEY,                    XKB_KEY_k,          focusstack,     {.i = -1} },
 	{ MODKEY,                    XKB_KEY_i,          incnmaster,     {.i = +1} },
@@ -136,7 +141,9 @@ static const Key keys[] = {
 	{ MODKEY,                    XKB_KEY_m,          setlayout,      {.v = &layouts[2]} },
 	{ MODKEY,                    XKB_KEY_space,      setlayout,      {0} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_space,      togglefloating, {0} },
-	{ MODKEY,                    XKB_KEY_e,         togglefullscreen, {0} },
+	{ MODKEY,                    XKB_KEY_e,          togglefullscreen, {0} },
+	{ MODKEY,                    XKB_KEY_d,          togglescratchpad, {0} },
+	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_D,          toggleinscratchpad, {0} },
 	{ MODKEY,                    XKB_KEY_0,          view,           {.ui = ~0} },
 	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_parenright, tag,            {.ui = ~0} },
 	{ MODKEY,                    XKB_KEY_comma,      focusmon,       {.i = WLR_DIRECTION_LEFT} },
diff --git a/dwl.c b/dwl.c
index bf763df..5ea71a4 100644
--- a/dwl.c
+++ b/dwl.c
@@ -139,6 +139,8 @@ typedef struct {
 	uint32_t tags;
 	int isfloating, isurgent, isfullscreen;
 	uint32_t resize; /* configure serial of a pending resize */
+	char scratchkey;
+	int inscratchpad;
 } Client;
 
 typedef struct {
@@ -228,6 +230,7 @@ typedef struct {
 	uint32_t tags;
 	int isfloating;
 	int monitor;
+	const char scratchkey;
 } Rule;
 
 typedef struct {
@@ -326,14 +329,18 @@ static void setpsel(struct wl_listener *listener, void *data);
 static void setsel(struct wl_listener *listener, void *data);
 static void setup(void);
 static void spawn(const Arg *arg);
+static void spawnnamedscratchpad(const Arg *arg);
 static void startdrag(struct wl_listener *listener, void *data);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tile(Monitor *m);
 static void togglefloating(const Arg *arg);
 static void togglefullscreen(const Arg *arg);
+static void raiserunnamedscratchpad(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
+static void togglescratchpad(const Arg *arg);
+static void toggleinscratchpad(const Arg *arg);
 static void unlocksession(struct wl_listener *listener, void *data);
 static void unmaplayersurfacenotify(struct wl_listener *listener, void *data);
 static void unmapnotify(struct wl_listener *listener, void *data);
@@ -453,6 +460,8 @@ applyrules(Client *c)
 	Monitor *mon = selmon, *m;
 
 	c->isfloating = client_is_float_type(c);
+	c->scratchkey = 0;
+	c->inscratchpad = 0;
 	if (!(appid = client_get_appid(c)))
 		appid = broken;
 	if (!(title = client_get_title(c)))
@@ -462,6 +471,7 @@ applyrules(Client *c)
 		if ((!r->title || strstr(title, r->title))
 				&& (!r->id || strstr(appid, r->id))) {
 			c->isfloating = r->isfloating;
+			c->scratchkey = r->scratchkey;
 			newtags |= r->tags;
 			i = 0;
 			wl_list_for_each(m, &mons, link) {
@@ -1911,10 +1921,20 @@ printstatus(void)
 	Client *c;
 	uint32_t occ, urg, sel;
 	const char *appid, *title;
+	int namedscratchpads_count;
+	int scratchpads_count;
 
 	wl_list_for_each(m, &mons, link) {
 		occ = urg = 0;
+		namedscratchpads_count = 0;
+		scratchpads_count = 0;
 		wl_list_for_each(c, &clients, link) {
+			if (c->scratchkey != 0) {
+				namedscratchpads_count++;
+			}
+			if (c->inscratchpad != 0) {
+				scratchpads_count++;
+			}
 			if (c->mon != m)
 				continue;
 			occ |= c->tags;
@@ -1941,6 +1961,8 @@ printstatus(void)
 		printf("%s tags %"PRIu32" %"PRIu32" %"PRIu32" %"PRIu32"\n",
 			m->wlr_output->name, occ, m->tagset[m->seltags], sel, urg);
 		printf("%s layout %s\n", m->wlr_output->name, m->ltsymbol);
+		printf("%s namedscratchpads_count %d\n", m->wlr_output->name, namedscratchpads_count);
+		printf("%s scratchpads_count %d\n", m->wlr_output->name, scratchpads_count);
 	}
 	fflush(stdout);
 }
@@ -2537,6 +2559,16 @@ spawn(const Arg *arg)
 	}
 }
 
+void spawnnamedscratchpad(const Arg *arg)
+{
+	if (fork() == 0) {
+		dup2(STDERR_FILENO, STDOUT_FILENO);
+		setsid();
+		execvp(((char **)arg->v)[1], ((char **)arg->v)+1);
+		die("dwl: execvp %s failed:", ((char **)arg->v)[1]);
+	}
+}
+
 void
 startdrag(struct wl_listener *listener, void *data)
 {
@@ -2620,6 +2652,61 @@ togglefullscreen(const Arg *arg)
 		setfullscreen(sel, !sel->isfullscreen);
 }
 
+void
+raiserunnamedscratchpad(const Arg *arg)
+{
+	Client *c;
+	unsigned int found = 0;
+	unsigned int hide = 0;
+
+	wl_list_for_each(c, &clients, link) {
+		if (c->scratchkey == 0) {
+			continue;
+		}
+		if (c->scratchkey == ((char**)arg->v)[0][0]) {
+			if (VISIBLEON(c, selmon)) {
+				if (found == 1) {
+					if (hide == 1) {
+						c->tags = 0;
+						focusclient(focustop(selmon), 1);
+					}
+					continue;
+				}
+				if (focustop(selmon) == c) {
+					// hide
+					c->tags = 0;
+					focusclient(focustop(selmon), 1);
+					hide = 1;
+				} else {
+					// focus
+					focusclient(c, 1);
+				}
+			} else {
+				// show
+				if (c->mon == selmon) {
+					c->tags = selmon->tagset[selmon->seltags];
+				} else {
+					setmon(c, selmon, 0);
+				}
+				// focus
+				focusclient(c, 1);
+			}
+			found = 1;
+			continue;
+		}
+		if (VISIBLEON(c, selmon)) {
+			// hide
+			c->tags = 0;
+		}
+	}
+
+	if (found) {
+		arrange(selmon);
+	} else {
+		spawnnamedscratchpad(arg);
+	}
+}
+
 void
 toggletag(const Arg *arg)
 {
@@ -2647,6 +2734,78 @@ toggleview(const Arg *arg)
 	printstatus();
 }
 
+void
+togglescratchpad(const Arg *arg)
+{
+	Client *c;
+	Client *sel = focustop(selmon);
+	int iscratchpadvisible;
+	int found = 0;
+	int visible = 0;
+	int focus = 0;
+	int hidden_count = 0;
+
+	wl_list_for_each(c, &clients, link) {
+		if (c->inscratchpad) {
+			found = 1;
+			if (sel == c) {
+				focus = 1;
+			}
+			if (VISIBLEON(c, selmon)) {
+				visible = 1;
+			}
+			if (!VISIBLEON(c, selmon)) {
+				hidden_count++;
+			}
+		}
+	}
+
+	if (!found) {
+		return;
+	}
+
+	if (hidden_count > 0) {
+		iscratchpadvisible = 0;
+	} else if (visible) {
+		if (focus) {
+			iscratchpadvisible = 1;
+		} else {
+			iscratchpadvisible = 0;
+		}
+	} else {
+		iscratchpadvisible = 0;
+	}
+
+	wl_list_for_each(c, &clients, link) {
+		if (c->inscratchpad) {
+			c->tags = iscratchpadvisible ? 0 : selmon->tagset[selmon->seltags];
+			if (c->tags != 0 && c->mon != selmon) {
+				setmon(c, selmon, 0);
+			}
+			focusclient(c->tags == 0 ? focustop(selmon) : c, 1);
+		}
+	}
+	arrange(selmon);
+}
+
+void
+toggleinscratchpad(const Arg *arg)
+{
+	Client *sel = focustop(selmon);
+	if (!sel)
+		return;
+	if (!sel->mon)
+		return;
+	sel->inscratchpad = !sel->inscratchpad;
+	if (sel->inscratchpad) {
+		sel->tags = 0;
+	} else {
+		sel->tags = selmon->tagset[selmon->seltags];
+	}
+	arrange(selmon);
+	printstatus();
+}
+
 void
 unlocksession(struct wl_listener *listener, void *data)
 {
-- 
2.44.1


From b02f1cd7c3d0160bfab383d3f5d9200ea02980bf Mon Sep 17 00:00:00 2001
From: wochap <gean.marroquin@gmail.com>
Date: Fri, 12 Apr 2024 19:17:58 -0500
Subject: [PATCH 2/4] togglescratchpad() hides namedscratchpad

if focused window is namedscratchpad then hide it
---
 dwl.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/dwl.c b/dwl.c
index 5ea71a4..91bf8ec 100644
--- a/dwl.c
+++ b/dwl.c
@@ -2745,6 +2745,14 @@ togglescratchpad(const Arg *arg)
 	int focus = 0;
 	int hidden_count = 0;
 
+	if (sel->scratchkey != 0) {
+		// hide namedscratchpad
+		sel->tags = 0;
+		focusclient(focustop(selmon), 1);
+		arrange(selmon);
+		return;
+	}
+
 	wl_list_for_each(c, &clients, link) {
 		if (c->inscratchpad) {
 			found = 1;
-- 
2.44.1


From cbd4d444dbe358f4a35e6ff678959cfc37f78584 Mon Sep 17 00:00:00 2001
From: wochap <gean.marroquin@gmail.com>
Date: Wed, 8 May 2024 17:44:52 -0500
Subject: [PATCH 3/4] fix: focus next client after sending selected client to
 scratchpad

---
 dwl.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/dwl.c b/dwl.c
index 91bf8ec..632c149 100644
--- a/dwl.c
+++ b/dwl.c
@@ -2807,6 +2807,7 @@ toggleinscratchpad(const Arg *arg)
 	sel->inscratchpad = !sel->inscratchpad;
 	if (sel->inscratchpad) {
 		sel->tags = 0;
+		focusclient(focustop(selmon), 1);
 	} else {
 		sel->tags = selmon->tagset[selmon->seltags];
 	}
-- 
2.44.1


From a54e558175d4770564d3b52a8c56690f490fd488 Mon Sep 17 00:00:00 2001
From: wochap <gean.marroquin@gmail.com>
Date: Sun, 9 Jun 2024 12:13:33 -0500
Subject: [PATCH 4/4] ensure that sel is not NULL to avoid dereferencing a NULL
 pointer.

---
 dwl.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dwl.c b/dwl.c
index 632c149..d90303b 100644
--- a/dwl.c
+++ b/dwl.c
@@ -2745,7 +2745,7 @@ togglescratchpad(const Arg *arg)
 	int focus = 0;
 	int hidden_count = 0;
 
-	if (sel->scratchkey != 0) {
+	if (sel && sel->scratchkey != 0) {
 		// hide namedscratchpad
 		sel->tags = 0;
 		focusclient(focustop(selmon), 1);
-- 
2.44.1

